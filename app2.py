from dotenv import load_dotenv
load_dotenv()  # Load environment variables

import streamlit as st
import os
import sqlite3
import google.generativeai as genai

# Configure Google Gemini API Key
genai.configure(api_key="AIzaSyDxWSomnXk_itGQ0Ansf7aBMZRyAsz2syM")

# Function to load Google Gemini model and get query response
def get_gemini_response(question, prompt):
    model = genai.GenerativeModel('gemini-pro')
    response = model.generate_content([prompt[0], question])
    return response.text.strip()

# Function to execute SQL query on the SQLite database
def read_sql_query(sql, db):
    conn = sqlite3.connect(db)
    cur = conn.cursor()
    cur.execute(sql)
    rows = cur.fetchall()
    conn.commit()
    conn.close()
    return rows

# Define the prompt for Google Gemini
prompt = [
    """
    You are an expert in converting English questions to SQL queries!
    The SQL database is named 'MCDONALDS_DATA' and has the following columns:
    - yummy, convenient, spicy, fattening, greasy, fast, cheap, tasty, expensive, healthy, disgusting, Like, Age, VisitFrequency, Gender.

    Examples:
    - "How many people find McDonald's food tasty?" -> SELECT COUNT(*) FROM MCDONALDS_DATA WHERE tasty="Yes";
    - "What is the average age of frequent visitors who like healthy food?" -> SELECT AVG(Age) FROM MCDONALDS_DATA WHERE healthy="Yes" AND VisitFrequency="frequently";
    -How many people find McDonald's food tasty?" -> SELECT COUNT(*) FROM MCDONALDS_DATA WHERE tasty="Yes";

    - What is the average age of people who think McDonald's food is both greasy and cheap?" -> SELECT AVG(Age) FROM MCDONALDS_DATA WHERE greasy="Yes" AND cheap="Yes";

    - How many people who find McDonald's food both convenient and fast have a Like score greater than 0?" -> SELECT COUNT(*) FROM MCDONALDS_DATA WHERE convenient="Yes" AND fast="Yes" AND Like > 0;

    - What percentage of people consider McDonald's food expensive but still find it tasty?" -> SELECT (COUNT() * 100.0 / (SELECT COUNT() FROM MCDONALDS_DATA)) AS percentage FROM MCDONALDS_DATA WHERE expensive="Yes" AND tasty="Yes";

    - What is the most common visit frequency among people who think McDonald's food is fattening?" -> SELECT VisitFrequency FROM MCDONALDS_DATA WHERE fattening="Yes" GROUP BY VisitFrequency ORDER BY COUNT(*) DESC LIMIT 1;

    - How many of the first 10 people find McDonald's food yummy?" -> SELECT COUNT(*) FROM (SELECT * FROM MCDONALDS_DATA LIMIT 10) AS limited_data WHERE yummy="Yes";

    - Determine the average age of customers who like healthy food but dislike greasy food, and also analyze their visit frequency and gender distribution" -> SELECT AVG(Age) AS average_age, VisitFrequency, Gender FROM MCDONALDS_DATA WHERE healthy="Yes" AND greasy="No" GROUP BY VisitFrequency, Gender;

    - Analyze customer segments based on their food preferences (e.g., 'yummy,' 'spicy') and demographic and behavioral factors like age, visit frequency, and gender" -> WITH PreferenceSegments AS (SELECT Gender, VisitFrequency, Age, CASE WHEN yummy="Yes" AND healthy="Yes" THEN "Yummy and Healthy" WHEN spicy="Yes" THEN "Spicy Lovers" WHEN fast="Yes" THEN "Fast Food Lovers" WHEN cheap="Yes" THEN "Price Conscious" ELSE "Other Preferences" END AS Food_Preference, CASE WHEN Like > 0 THEN "Positive" WHEN Like < 0 THEN "Negative" ELSE "Neutral" END AS Like_Sentiment FROM MCDONALDS_DATA WHERE Gender IS NOT NULL) SELECT ps.Gender, ps.VisitFrequency, ps.Food_Preference, COUNT() AS Segment_Size, ROUND((COUNT() * 100.0 / SUM(COUNT()) OVER (PARTITION BY ps.Gender)), 2) AS Segment_Percentage, RANK() OVER (PARTITION BY ps.Gender ORDER BY COUNT() DESC) AS Rank_Within_Gender, (CASE WHEN AVG(ps.Age) > 40 THEN "Older Age Group" ELSE "Younger Age Group" END) AS Age_Group, ps.Like_Sentiment FROM PreferenceSegments ps GROUP BY ps.Gender, ps.VisitFrequency, ps.Food_Preference, ps.Like_Sentiment HAVING Segment_Size > 5 ORDER BY ps.Gender, Rank_Within_Gender;
    Avoid using ``` or "sql" in the output.
    """
]

# Streamlit App Configuration
st.set_page_config(page_title="Gemini SQL Query App")
st.header("Gemini SQL Query App for test.db")

# User input for the question
question = st.text_input("Ask a question about the dataset:", key="input")

# Button to submit the question
submit = st.button("Ask the question")

# If the submit button is clicked
if submit:
    # Get the SQL query generated by Google Gemini
    sql_query = get_gemini_response(question, prompt)
    st.write(f"Generated SQL Query: {sql_query}")

    # Execute the query on test.db
    response = read_sql_query(sql_query, "test.db")

    # Display the query results
    st.subheader("Query Results:")
    if response:
        for row in response:
            st.write(row)
    else:
        st.write("No results found.")
